version: 2
jobs:
  build:
    environment:
      CC_TEST_REPORTER_ID: $CODE_CLIMATE_TEST_REPORTER_ID
    parallelism: 4
    docker:
      - image: circleci/ruby:2.4.5-node-browsers
        environment:
          - RAILS_ENV: "test"
          - MYSQL_USER: root
      - image: circleci/mysql:5.7.22-ram
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_ROOT_HOST: "%"

    steps:
      - checkout

      # Bundle
      - restore_cache:
          keys:
            - gem-cache-{{ arch }}--{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-{{ arch }}--{{ .Branch }}
            - gem-cache

      - run: bundle install --path vendor/bundle

      - save_cache:
          key: gem-cache-{{ arch }}--{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run: cp config/database.yml.mysql.template config/database.yml
      - run: cp config/secrets.yml.template config/secrets.yml

      # Database setup
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format documentation \
                              $(circleci tests glob \
                              "spec/**/*_spec.rb" \
                              "vendor/engines/**/spec/**/*_spec.rb" \
                              | circleci tests split --split-by=timings)

      - run:
          command: |
            if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
              bundle exec teaspoon \
                --suppress-log \
                --format junit > /tmp/test-results/teaspoon.xml
            fi

      # Deploy if specified branch
      - add_ssh_keys
      - deploy:
          name: Deploy to staging if branch is develop
          command: |
             if [ "${CIRCLE_BRANCH}" == "test-new-prod-ops" ]; then
               eval `ssh-agent` && ssh-add ~/.ssh/id_rsa* && bundle exec cap production deploy
             else
               echo "Not on deployment branch => Not deploying to production"
             fi
      # Save artifacts
      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
         path: coverage/.resultset.json
         prefix: coverage

      - run: bundle exec report_coverage
